<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.library.mapper.BookMapper">
    <sql id="postColumns">
        id
        , title
        , writer
        , publicateAt
        , status
        , recommend
        , createdAt
        , modifiedAt
        , deleteStatus
    </sql>

    <!-- Book 전체 조회 페이징 추가 필요 (정렬 순서) -->
    <select id="getBookList" resultType="com.project.library.dto.response.BookResponseDto">
        SELECT *
        FROM book;
    </select>


    <!-- book 테이블에서 book title로 조회, 고유 id 기준 가장 최근 데이터를 조회   -->
    <select id="findByTitle" resultType="com.project.library.dto.response.BookResponseDto">
        SELECT * FROM book
        where title = #{title} ORDER BY id DESC LIMIT 1;
    </select>
    <!-- book 테이블에서 book title로 조회   -->
    <select id="findsByTitle" resultType="com.project.library.dto.response.BookResponseDto">
        SELECT *
        FROM book
        WHERE title = #{title}
        ORDER BY id DESC;
    </select>

    <!-- Writer로 조회, 고유 id 기준 내림차순 정렬   -->
    <select id="findByWriter" resultType="com.project.library.dto.response.BookResponseDto">
        SELECT *
        FROM book
        WHERE writer = #{writer}
        ORDER BY id DESC;
    </select>
    <!-- Book 고유키 id로 조회   -->
    <select id="findByBookId" resultType="com.project.library.dto.response.BookResponseDto">
        SELECT *
        FROM book
        WHERE id = #{id};
    </select>

    <!-- Book title, writer로 조회   -->
    <select id="findBook" resultType="com.project.library.dto.response.BookResponseDto">
        <bind name="subTitle" value="'%'+ title +'%'"/>
        <bind name="subWriter" value="'%'+ writer +'%'"/>
        SELECT * FROM book
        where 1=1
        <if test='subTitle != null and subTitle != ""'>
            -- title이 "null"이 아니고 공백이 아니면 subtitle이 포함된 행을 불러온다
            and title like #{subTitle}
        </if>
        <if test='subWriter != null and subWriter != ""'>
            -- writer이 "null"이 아니고 공백이 아니면 subWriter이 포함된 행을 불러온다
            and writer like #{subWriter}
        </if>

        ORDER BY id DESC;
    </select>

    <select id="findByCategoryId" resultType="com.project.library.dto.response.BookResponseDto">
        SELECT
            b.id
             , b.title
             , b.publicateAt
             , b.writer
             , b.status
             , b.recommend
             , b.createdAt
             , b.modifiedAt
             , b.deleteStatus
            FROM book AS b
            INNER JOIN bookAndCategory AS bc
            ON b.id = bc.bookId
            INNER JOIN category AS c
            ON bc.categoryId = c.id
        WHERE c.id = #{id}
    </select>

    <update id="deleteBook" parameterType="Long">
        UPDATE book
        SET deleteStatus = false,
            modifiedAt = now()
        WHERE id = #{id}
    </update>

    <!-- request Body 요청 데이터를 DB에 저장-->
    <insert id="saveBook" parameterType="com.project.library.dto.request.BookPostRequestDto" >
        <selectKey resultType="Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO book (
        <include refid="postColumns"></include>
        ) VALUES (
                #{id}
                ,#{title}
                ,#{writer}
                ,#{publicateAt}
                ,#{status}
                ,0
                ,now()
                ,null
                ,true
            )

    </insert>

    <!-- request Body 요청 데이터를 DB에 저장-->
    <update id="updateBook" parameterType="com.project.library.dto.request.BookPatchRequestDto">
        UPDATE book
        SET
            id           = #{id},
            title        = #{title},
            writer       = #{writer},
            publicateAt  = #{publicateAt},
            recommend    = #{recommend},
            status       = #{status},
            modifiedAt   = now(),
            deleteStatus = #{deleteStatus}
        WHERE id = #{id}
    </update>

    <!--  Book Date Update  -->
    <insert id="saveBookCategory" parameterType="com.project.library.dto.response.BookAndCategoryDto" >
<!--        <foreach collection="bookAndCategory" index="index" item="item" open="[" separator="," close="]">-->
        INSERT INTO bookAndCategory (
            bookId, categoryId
        ) VALUES (
            #{bookAndCategory.bookId},
            #{bookAndCategory.categoryId}
            )
<!--        </foreach>-->
    </insert>


</mapper>